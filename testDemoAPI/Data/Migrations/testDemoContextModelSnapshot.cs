// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using testDemoAPI.Data;

namespace testDemoAPI.Data.Migrations
{
    [DbContext(typeof(testDemoContext))]
    partial class testDemoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("testDemoAPI.Models.ChartDashboard", b =>
                {
                    b.Property<string>("name")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("dashboardId");

                    b.Property<int?>("dashboardId1");

                    b.Property<double>("value");

                    b.HasKey("name");

                    b.HasIndex("dashboardId");

                    b.HasIndex("dashboardId1");

                    b.ToTable("chartDashboards");
                });

            modelBuilder.Entity("testDemoAPI.Models.Dashboard", b =>
                {
                    b.Property<int>("dashboardId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("success");

                    b.HasKey("dashboardId");

                    b.ToTable("dashboards");
                });

            modelBuilder.Entity("testDemoAPI.Models.Error", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("columnName");

                    b.Property<string>("columnValue");

                    b.Property<string>("innerException");

                    b.Property<string>("message");

                    b.Property<string>("stacktrace");

                    b.HasKey("id");

                    b.ToTable("errors");
                });

            modelBuilder.Entity("testDemoAPI.Models.LoginRequest", b =>
                {
                    b.Property<string>("userName")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("password")
                        .IsRequired();

                    b.HasKey("userName");

                    b.ToTable("loginRequests");
                });

            modelBuilder.Entity("testDemoAPI.Models.Platform", b =>
                {
                    b.Property<int>("platformId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("createdAt");

                    b.Property<double>("latitude");

                    b.Property<double>("longitude");

                    b.Property<string>("uniqueName");

                    b.Property<DateTime>("updatedAt");

                    b.HasKey("platformId");

                    b.ToTable("platforms");
                });

            modelBuilder.Entity("testDemoAPI.Models.PlatformDummy", b =>
                {
                    b.Property<int>("platformId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("lastUpdated");

                    b.Property<double>("latitude");

                    b.Property<double>("longitude");

                    b.Property<string>("uniqueName");

                    b.HasKey("platformId");

                    b.ToTable("platformDummies");
                });

            modelBuilder.Entity("testDemoAPI.Models.TableUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("dashboardId");

                    b.Property<string>("firstName");

                    b.Property<string>("lastName");

                    b.Property<string>("userName");

                    b.HasKey("id");

                    b.HasIndex("dashboardId");

                    b.ToTable("tableUsers");
                });

            modelBuilder.Entity("testDemoAPI.Models.Well", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("createdAt");

                    b.Property<double>("latitude");

                    b.Property<double>("longitude");

                    b.Property<int>("platformId");

                    b.Property<string>("uniqueName");

                    b.Property<DateTime>("updatedAt");

                    b.HasKey("id");

                    b.HasIndex("platformId");

                    b.ToTable("wells");
                });

            modelBuilder.Entity("testDemoAPI.Models.WellDummy", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("lastUpdated");

                    b.Property<double>("latitude");

                    b.Property<double>("longitude");

                    b.Property<int>("platformId");

                    b.Property<string>("uniqueName");

                    b.HasKey("id");

                    b.HasIndex("platformId");

                    b.ToTable("wellDummies");
                });

            modelBuilder.Entity("testDemoAPI.Models.ChartDashboard", b =>
                {
                    b.HasOne("testDemoAPI.Models.Dashboard")
                        .WithMany("chartBar")
                        .HasForeignKey("dashboardId");

                    b.HasOne("testDemoAPI.Models.Dashboard")
                        .WithMany("chartDonut")
                        .HasForeignKey("dashboardId1");
                });

            modelBuilder.Entity("testDemoAPI.Models.TableUser", b =>
                {
                    b.HasOne("testDemoAPI.Models.Dashboard")
                        .WithMany("tableUsers")
                        .HasForeignKey("dashboardId");
                });

            modelBuilder.Entity("testDemoAPI.Models.Well", b =>
                {
                    b.HasOne("testDemoAPI.Models.Platform")
                        .WithMany("wells")
                        .HasForeignKey("platformId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("testDemoAPI.Models.WellDummy", b =>
                {
                    b.HasOne("testDemoAPI.Models.PlatformDummy")
                        .WithMany("wellDummies")
                        .HasForeignKey("platformId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
